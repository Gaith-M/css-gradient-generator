{"version":3,"sources":["components/ColorPicker.js","components/colors-panel/Swatch.js","components/colors-panel/ColorsPanel.js","components/Preview.js","components/settings/Slider.js","components/settings/Settings.js","components/Output.js","functions/functions.js","containers/Container.js","App.js","serviceWorker.js","index.js"],"names":["ColorPicker","colorVal","handleColorChange","color","onChange","Swatch","id","active","changeActiveColor","changeColorValue","deleteColor","useState","displayPicker","setDisplay","className","style","border","onClick","backgroundColor","size","white","grey","data-id","ColorsPanel","colors","activeColorIndex","addNewColor","fullPreview","map","i","key","colorId","colorValue","Preview","gradient","gradDegree","togglePreviewMode","length","backgroundImage","slider_container","width","Slider","val","handleChange","name","min","max","type","step","value","Settings","activeColorPoints","removePoints","activeColor","clearAllPoints","start","end","background","Output","language","createGradient","arr","colorObj","startPosition","startPos","endPosition","endPos","colorArr","join","trim","Container","state","setState","setActiveColorIndex","deg","setDeg","setGradient","togglePreview","useEffect","e","target","colorIndex","findIndex","elem","newColor","r","Math","floor","random","g","b","prevState","uuidv4","slice","rgb","a","dataset","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9d2b417a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { ChromePicker } from \"react-color\";\r\n\r\nconst ColorPicker = ({ colorVal, handleColorChange }) => (\r\n  <ChromePicker color={colorVal} onChange={handleColorChange} />\r\n);\r\n\r\nexport default ColorPicker;\r\n","import React, { useState } from \"react\";\r\nimport ColorPicker from \"../ColorPicker\";\r\nimport \"./swatch.css\";\r\nimport { Checkboard } from \"react-color/lib/components/common\";\r\n\r\nconst Swatch = ({\r\n  id,\r\n  colorVal,\r\n  active,\r\n  changeActiveColor,\r\n  changeColorValue,\r\n  deleteColor,\r\n}) => {\r\n  const [displayPicker, setDisplay] = useState(false);\r\n\r\n  const openPicker = () => {\r\n    setDisplay(() => true);\r\n  };\r\n\r\n  const closePicker = () => {\r\n    setDisplay(() => false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"swatch\">\r\n      <div\r\n        className=\"colorContainer\"\r\n        style={{ border: active ? \"3px solid #fff\" : \"3px solid #ccc\" }}\r\n        onClick={openPicker}\r\n      >\r\n        <div\r\n          className=\"color\"\r\n          style={{ backgroundColor: colorVal }}\r\n          id={id}\r\n          onClick={changeActiveColor}\r\n        ></div>\r\n        <Checkboard size={7} white=\"#fff\" grey=\"#333\" className=\"checkBoard\" />\r\n      </div>\r\n      <div className=\"close\">\r\n        <span onClick={deleteColor}>\r\n          <i className=\"fa fa-times\" data-id={id}></i>\r\n        </span>\r\n      </div>\r\n\r\n      {displayPicker ? (\r\n        <div className=\"popover\">\r\n          <div className=\"cover\" onClick={closePicker} />\r\n          <ColorPicker\r\n            colorVal={colorVal}\r\n            handleColorChange={changeColorValue}\r\n          />\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Swatch;\r\n","import React from \"react\";\r\nimport Swatch from \"./Swatch\";\r\nimport \"./colorsPanel.css\";\r\n\r\nconst ColorsPanel = ({\r\n  colors,\r\n  activeColorIndex,\r\n  changeActiveColor,\r\n  addNewColor,\r\n  changeColorValue,\r\n  deleteColor,\r\n  fullPreview,\r\n}) => {\r\n  return (\r\n    <div className={fullPreview ? \"HIDDEN\" : \"NORMAL_PREVIEW\"}>\r\n      {colors.map((color, i) => {\r\n        if (i === activeColorIndex) {\r\n          return (\r\n            <Swatch\r\n              key={color.colorId}\r\n              id={color.colorId}\r\n              colorVal={color.colorValue}\r\n              active={true}\r\n              changeActiveColor={changeActiveColor}\r\n              changeColorValue={changeColorValue}\r\n              deleteColor={deleteColor}\r\n            />\r\n          );\r\n        }\r\n        return (\r\n          <Swatch\r\n            key={color.colorId}\r\n            id={color.colorId}\r\n            colorVal={color.colorValue}\r\n            active={false}\r\n            changeActiveColor={changeActiveColor}\r\n            changeColorValue={changeColorValue}\r\n            deleteColor={deleteColor}\r\n          />\r\n        );\r\n      })}\r\n      <button onClick={addNewColor} className=\"addColorBtn\">\r\n        <i className=\"fa fa-plus\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorsPanel;\r\n","import React from \"react\";\r\nimport { Checkboard } from \"react-color/lib/components/common\";\r\nimport \"../App.css\";\r\n\r\nconst Preview = ({ gradient, gradDegree, fullPreview, togglePreviewMode }) => {\r\n  if (gradient.length <= 1) {\r\n    return (\r\n      <div className=\"normal_preview tip_preview\">\r\n        <p>Please, have at least two colors assigned.</p>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={fullPreview ? \"full_preview\" : \"normal_preview\"}>\r\n      <span className=\"expandBtn\" onClick={togglePreviewMode}>\r\n        <i className=\"fa fa-expand\"></i>\r\n      </span>\r\n      <div\r\n        style={{\r\n          backgroundImage: `linear-gradient(${gradDegree}deg, ${gradient})`,\r\n        }}\r\n        className=\"preview_window\"\r\n      />\r\n      <Checkboard />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preview;\r\n","import React from \"react\";\r\nimport \"./sliderStyles.css\";\r\n\r\nconst slider_container = {\r\n  width: \"100%\",\r\n};\r\n\r\nconst Slider = ({ val, handleChange, name, min, max }) => {\r\n  return (\r\n    <div className={slider_container}>\r\n      <input\r\n        type=\"range\"\r\n        min={min}\r\n        max={max}\r\n        step=\"1\"\r\n        name={name}\r\n        value={val}\r\n        className=\"slider\"\r\n        onChange={handleChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Slider;\r\n","import React from \"react\";\r\nimport Slider from \"./Slider\";\r\nimport \"./settings.css\";\r\nimport { Checkboard } from \"react-color/lib/components/common\";\r\n\r\nconst Settings = ({\r\n  activeColorPoints,\r\n  removePoints,\r\n  activeColor,\r\n  gradDegree,\r\n  clearAllPoints,\r\n  handleChange,\r\n}) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"settings_area\">\r\n        <label>\r\n          Gradient Angle:\r\n          <Slider\r\n            val={gradDegree}\r\n            name=\"deg\"\r\n            min=\"0\"\r\n            max=\"720\"\r\n            handleChange={handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          Active Color Start :\r\n          <Slider\r\n            handleChange={handleChange}\r\n            val={activeColorPoints.start}\r\n            name=\"startPos\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          Active Color End:\r\n          <Slider\r\n            handleChange={handleChange}\r\n            val={activeColorPoints.end}\r\n            name=\"endPos\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n          />\r\n        </label>\r\n        <div className=\"settingsButtonsHolder\">\r\n          <button onClick={clearAllPoints}>\r\n            Remove All Color Position Points\r\n          </button>\r\n          <button onClick={removePoints}>\r\n            Remove Current Color Position Points\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"activeColor\">\r\n        <div\r\n          style={{\r\n            background: `${activeColor}`,\r\n          }}\r\n        ></div>\r\n        <Checkboard\r\n          size={14}\r\n          white=\"#fff\"\r\n          grey=\"#333\"\r\n          className=\"activeColorCheckBoard\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import React from \"react\";\r\nimport Highlight from \"react-highlight\";\r\nimport \"../App.css\";\r\n\r\nconst Output = ({ gradient, gradDegree }) => {\r\n  if (gradient.length <= 1) {\r\n    return <div className=\"output_styles\"></div>;\r\n  }\r\n  return (\r\n    <div className=\"output_styles\">\r\n      <Highlight language=\"css\">\r\n        {`background-image: linear-gradient (${gradDegree}% ${gradient});`}\r\n      </Highlight>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Output;\r\n","export const createGradient = (arr) => {\r\n  return arr\r\n    .map((colorObj) => {\r\n      let startPosition = colorObj.startPos ? `${colorObj.startPos}%` : \"\";\r\n      let endPosition = colorObj.endPos ? `${colorObj.endPos}%` : \"\";\r\n      return [colorObj.colorValue, startPosition, endPosition];\r\n    })\r\n    .map((colorArr) => colorArr.join(\" \").trim());\r\n};\r\n\r\nexport const generateColor = () => ({\r\n  r: Math.floor(Math.random() * 256),\r\n  g: Math.floor(Math.random() * 256),\r\n  b: Math.floor(Math.random() * 256),\r\n});\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ColorsPanel from \"../components/colors-panel/ColorsPanel\";\r\nimport Preview from \"../components/Preview\";\r\nimport Settings from \"../components/settings/Settings\";\r\nimport Output from \"../components/Output\";\r\nimport { createGradient, generateColor } from \"../functions/functions\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst Container = () => {\r\n  const [state, setState] = useState({\r\n    colors: [\r\n      {\r\n        colorId: \"c-1\",\r\n        colorValue: \"rgba(226,112,5, 1)\",\r\n        startPos: \"\",\r\n        endPos: \"\",\r\n      },\r\n      {\r\n        colorId: \"c-2\",\r\n        colorValue: \"rgba(7,124,178, 1)\",\r\n        startPos: \"\",\r\n        endPos: \"\",\r\n      },\r\n    ],\r\n  });\r\n\r\n  const [activeColorIndex, setActiveColorIndex] = useState(0);\r\n  const [deg, setDeg] = useState(45);\r\n  const [gradient, setGradient] = useState(createGradient(state.colors));\r\n  const [fullPreview, togglePreview] = useState(false);\r\n\r\n  const togglePreviewMode = () => togglePreview((prevState) => !prevState);\r\n\r\n  const changeActiveColor = (e) => {\r\n    let id = e.target.id;\r\n    let condition = (elem) => elem.colorId === id;\r\n    let colorIndex = state.colors.findIndex(condition);\r\n\r\n    setActiveColorIndex(() => colorIndex);\r\n  };\r\n\r\n  const addNewColor = () => {\r\n    if (state.colors.length >= 10) return;\r\n    const newColor = generateColor();\r\n    setState((prevState) => ({\r\n      colors: [\r\n        ...prevState.colors,\r\n        {\r\n          colorId: uuidv4(),\r\n          colorValue: `rgba(${newColor.r},${newColor.g},${newColor.b}, 1)`,\r\n          startPos: \"\",\r\n          endPos: \"\",\r\n        },\r\n      ],\r\n    }));\r\n\r\n    setActiveColorIndex(() => state.colors.length);\r\n  };\r\n\r\n  const deleteColor = (e) => {\r\n    if (state.colors.length <= 1) return;\r\n    let id = e.target.dataset.id;\r\n    let colorIndex = state.colors.findIndex((elem) => elem.colorId === id);\r\n\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      colors: [\r\n        ...prevState.colors.slice(0, colorIndex),\r\n        ...prevState.colors.slice(colorIndex + 1),\r\n      ],\r\n    }));\r\n    setActiveColorIndex(() => 0);\r\n  };\r\n\r\n  const changeColorValue = (color) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      colors: [\r\n        ...prevState.colors.slice(0, activeColorIndex),\r\n        {\r\n          ...prevState.colors[activeColorIndex],\r\n          colorValue: `rgba(${color.rgb.r}, ${color.rgb.g}, ${color.rgb.b}, ${color.rgb.a})`,\r\n        },\r\n        ...prevState.colors.slice(activeColorIndex + 1),\r\n      ],\r\n    }));\r\n  };\r\n\r\n  const controlSliders = (e) => {\r\n    if (state.colors.length <= 1) return;\r\n    const { value, name } = e.target;\r\n    if (name === \"deg\") {\r\n      setDeg(() => value);\r\n    } else {\r\n      setState((prevState) => {\r\n        return {\r\n          ...prevState,\r\n          colors: [\r\n            ...prevState.colors.slice(0, activeColorIndex),\r\n            {\r\n              ...prevState.colors[activeColorIndex],\r\n              [name]: value,\r\n            },\r\n            ...prevState.colors.slice(activeColorIndex + 1),\r\n          ],\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  const clearAllColorPos = () => {\r\n    setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        colors: [\r\n          ...prevState.colors.map((color) => ({\r\n            ...color,\r\n            startPos: \"\",\r\n            endPos: \"\",\r\n          })),\r\n        ],\r\n      };\r\n    });\r\n  };\r\n\r\n  const removeActiveColorPosPoints = () => {\r\n    if (state.colors.length <= 1) return;\r\n    setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        colors: [\r\n          ...prevState.colors.slice(0, activeColorIndex),\r\n          {\r\n            ...prevState.colors[activeColorIndex],\r\n            startPos: \"\",\r\n            endPos: \"\",\r\n          },\r\n          ...prevState.colors.slice(activeColorIndex + 1),\r\n        ],\r\n      };\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setGradient(() => createGradient(state.colors));\r\n  }, [state.colors]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"colorsPanel_and_preview_container\">\r\n        <ColorsPanel\r\n          colors={state.colors}\r\n          activeColorIndex={activeColorIndex}\r\n          changeActiveColor={changeActiveColor}\r\n          addNewColor={addNewColor}\r\n          changeColorValue={changeColorValue}\r\n          deleteColor={deleteColor}\r\n          fullPreview={fullPreview}\r\n        />\r\n        <Preview\r\n          gradient={gradient}\r\n          gradDegree={deg}\r\n          fullPreview={fullPreview}\r\n          togglePreviewMode={togglePreviewMode}\r\n        />\r\n      </div>\r\n      <Settings\r\n        activeColorPoints={{\r\n          start: state.colors[activeColorIndex].startPos,\r\n          end: state.colors[activeColorIndex].endPos,\r\n        }}\r\n        removePoints={removeActiveColorPosPoints}\r\n        clearAllPoints={clearAllColorPos}\r\n        activeColor={state.colors[activeColorIndex].colorValue}\r\n        gradDegree={deg}\r\n        handleChange={controlSliders}\r\n      />\r\n      <Output gradient={gradient} gradDegree={deg} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Container from \"./containers/Container\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Container />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}